buildscript {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://artifactory.appodeal.com/appodeal-public/" }
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven-publish'

allprojects {
    def props = new Properties()
    props.load(new FileInputStream("${rootDir}/realm.properties"))
    props.each { key, val ->
        project.ext.set(key, val)
    }
}

def properties = new Properties()
properties.load(new FileInputStream("${rootDir}/dependencies.list"))

def syncVersion = properties.getProperty('REALM_SYNC_VERSION')

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://artifactory.appodeal.com/appodeal-public/" }
}

configurations {
    provided
    compile.extendsFrom provided
}

// Include the generated Version file
sourceSets {
    main {
        compileClasspath += configurations.provided
        java {
            srcDir 'build/generated-src/main/java'
        }
        groovy {
            srcDirs = ['src/main/groovy']
        }
    }
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()
    implementation "io.realm:realm-annotations:3.7.2"
    provided 'com.android.tools.build:gradle:2.1.0'
    implementation 'org.javassist:javassist:3.20.0-GA'

    // Fix CompileGroovy Error : package javax.xml.bind does not exist
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

    testImplementation('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

// for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

task generateVersionClass(type: Copy) {
    from 'src/main/templates/Version.java'
    into 'build/generated-src/main/java/io/realm/transformer'
    filter(ReplaceTokens, tokens: [version: version, syncVersion: syncVersion])
    outputs.upToDateWhen { false }
}

compileJava.dependsOn generateVersionClass

wrapper {
    gradleVersion = project.gradleVersion
}

jar {
    from sourceSets.main.allSource
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.findByName('release')
                groupId = 'com.github.rlebranchu'
                artifactId = 'realm-transformer'
                version = '3.7.2'
            }
        }
    }
}